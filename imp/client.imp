const SERVO_MIN = 0.025;
const SERVO_MAX = 0.067;


previous <- 999999999;

upLocation <- 999999999;

servo <- hardware.pin1;
pot <- hardware.pin9;

loggingEnabled <- false;

servo.configure(PWM_OUT, 0.02, SERVO_MIN);

// Configure the pin for analog input
pot.configure(ANALOG_IN);

function hit()
{
    local timeDiff = hardware.millis() - initTime;
    
    log("Was hit " + timeDiff);
    setDown();
    
    imp.cancelwakeup(upTimeout);
    
    local resultObj = clone(currentArgs);
    resultObj.time <- timeDiff
    
    agent.send("hit", resultObj);   
}


function poll() {
 
    local current = pot.read();
    
    local percentage = calcPercentage(current, upLocation);
    
    log("Percentage " + percentage);
    
    if(percentage > 0.8){
        log("Hit!");
        hit();
    } else {
        pollTimeout <- imp.wakeup(0.05, poll);   
    }
}

function pollUp()
{
    local current = pot.read();
    
    log("Current " + current);
    log("Previous " + previous);
    
    local percentage = calcPercentage(current, previous);
    
    log("Percentage " + percentage);
    
    if(percentage < 2){
        log("We are up! " + current);
        upLocation = current;
        poll();
    } else {
        log("Not up yet");
        previous <- current;
        imp.wakeup(0.1, pollUp);
    }
}

function setDown() {
    if(pollTimeout){
        imp.cancelwakeup(pollTimeout);
    }
    servo.write(SERVO_MIN);
}

function setUp()
{
    log("Setting up");
    servo.write(SERVO_MAX);
    
    pollUp();
}

function miss()
{
    setDown();
    agent.send("miss", currentArgs)   
}


function up(args)
{
    currentArgs <- args
    
    setUp();
    initTime <- hardware.millis();
    
    upTimeout <- imp.wakeup(currentArgs.timeout, miss);
}


function log(val){
    if(loggingEnabled){
        server.log(val);   
    }
}

function calcPercentage(val1, val2){
    local diff = math.abs(val1 - val2);
    
    return (diff.tofloat() / val1.tofloat()) * 100;
}

agent.on("up", up);