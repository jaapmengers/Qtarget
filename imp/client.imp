const SERVO_MIN = 0.0415;
const SERVO_MAX = 0.089;
const HIT_TRESHOLD = 750;

// Create global variable for the pin to which the servo is connected
// then configure the pin for PWM
servo <- hardware.pin7;
transistor <- hardware.pin9;
servo.configure(PWM_OUT, 0.02, SERVO_MIN);
transistor.configure(DIGITAL_OUT);

button <- hardware.pin1;
globalState <- 0;

// ===========================
function up(args)
{
    currentArgs <- args
    
    setUp();
    listen();
    initTime <- hardware.millis();
    
    upTimeout <- imp.wakeup(currentArgs.timeout, miss);
}

function setUp()
{
    server.log("Setting up");
    servo.write(SERVO_MAX);
}

agent.on("up", up);

// ===========================

function hit()
{
    server.log("Hit()");
    local timeDiff = hardware.millis() - initTime;
    
    server.log(timeDiff);
    
    if(timeDiff > HIT_TRESHOLD){
        server.log("Was hit");
        setDown();
        
        imp.cancelwakeup(upTimeout);
        
        local resultObj = clone(currentArgs);
        resultObj.time <- timeDiff
        
        agent.send("hit", resultObj);   
    }
}

function miss()
{
    ignore();
    setDown();
    agent.send("miss", currentArgs)   
}

function setDown()
{
    globalState = 0;
    server.log("Setting down");
    servo.write(SERVO_MIN);
}

// ===========================

function buttonPress() 
{
    local state = button.read()
    previousState <- globalState
    if (state == 1) 
    {
        globalState = 1
    } 
    else 
    {
        globalState = 0
    }
    
    
    if(globalState != previousState){
        if(globalState == 1){
            cancellable <- imp.wakeup(0.01, hit)  
        } else {
            imp.cancelwakeup(cancellable)
        }
    }   
}

function ignoreButtonPress()
{
    
}

// ===========================

function listen()
{
    button.configure(DIGITAL_IN_PULLUP, buttonPress);    
}

function ignore()
{
    button.configure(DIGITAL_IN_PULLUP, ignoreButtonPress);    
}

// ===========================

